{"version":3,"sources":["../../src/libs/https.js"],"names":["customHttps","options","requestParams","resolve","reject","body","headers","Buffer","byteLength","request","response","currentBody","setEncoding","on","chunk","push","JSON","parse","join","e","includes","statusCode","Object","prototype","toString","call","error","fieldsError","Error","fields","write","end"],"mappingsqBA,W;;;;;;;4BACHC,O,EAAS;AAAA;;AACvB,UAAMC,wCAAgB,sBAAc,EAAd,EAAkBD,OAAlB,CAAhB,CAAN;AADuB;AAEvB,aAAO,sBAAY,UAACE,OAAD,EAAUC,MAAV,EAAqB;AAAA;AAAA;;AACtC,YAAI,2BAAC,UAAUF,aAAX,KAA8B,IAA9B,gCAAsCA,cAAcG,IAAd,KAAuB,IAA7D,CAAJ,EAAuE;AAAA;AAAA;;AACrEH,wBAAcG,IAAd,GAAqB,yBAAeH,cAAcG,IAA7B,CAArB;AADqE;AAErEH,wBAAcI,OAAd,GAAwB,sBAAc;AACpC,4BAAgB,kBADoB;AAEpC,8BAAkBC,OAAOC,UAAP,CAAkBN,cAAcG,IAAhC;AAFkB,WAAd,EAGrBH,cAAcI,OAHO,CAAxB;AAID,SAND;AAAA;AAAA;;AAQA,YAAMG,kCAAU,gBAAMA,OAAN,CAAcP,aAAd,EAA6B,UAACQ,QAAD,EAAc;AAAA;;AACzD,cAAIC,sCAAc,EAAd,CAAJ;;AADyD;AAGzDD,mBAASE,WAAT,CAAqB,MAArB;AAHyD;AAIzDF,mBAASG,EAAT,CAAY,MAAZ,EAAoB,UAACC,KAAD,EAAW;AAAA;AAAA;;AAC7BH,wBAAYI,IAAZ,CAAiBD,KAAjB;AACD,WAFD;AAJyD;AAOzDJ,mBAASG,EAAT,CAAY,KAAZ,EAAmB,YAAM;AAAA;AAAA;;AACvB,gBAAI;AAAA;;AACFF,4BAAcK,KAAKC,KAAL,CAAWN,YAAYO,IAAZ,CAAiB,EAAjB,CAAX,CAAd;AACD,aAFD,CAEE,OAAOC,CAAP,EAAU;AAAA;;AACVR,4BAAc,EAAd;AACD;;AALsB;AAOvB,gBAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgBS,QAAhB,CAAyBV,SAASW,UAAlC,MAAkD,KAAtD,EAA6D;AAAA;AAAA;;AAC3D,kBAAI,sEAAgB,WAAWV,WAAZ,KAA6B,IAA5C,CAAJ,EAAsD;AAAA;AAAA;;AACpD,oBAAIW,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+Bd,YAAYe,KAA3C,MAAsD,iBAA1D,EAA6E;AAAA;;AAC3E,sBAAMC,uCAAc,IAAIC,KAAJ,CAAU,cAAV,CAAd,CAAN;AAD2E;AAE3ED,8BAAYE,MAAZ,GAAqBlB,YAAYe,KAAjC;AAF2E;AAG3EtB,yBAAOuB,WAAP;AAH2E;AAI3E;AACD,iBALD;AAAA;AAAA;;AADoD;AAQpDvB,uBAAO,IAAIwB,KAAJ,CAAUjB,YAAYe,KAAtB,CAAP;AARoD;AASpD;AACD,eAVD;AAAA;AAAA;;AAD2D;AAa3DtB,qBAAO,IAAIwB,KAAJ,CAAUlB,SAASW,UAAnB,CAAP;AAb2D;AAc3D;AACD,aAfD;AAAA;AAAA;;AAPuB;AAwBvBlB,oBAAQQ,WAAR;AACD,WAzBD;AA0BD,SAjCe,CAAV,CAAN;;AATsC;AA4CtCF,gBAAQI,EAAR,CAAW,OAAX,EAAoB,UAACa,KAAD,EAAW;AAAA;AAAA;;AAC7BtB,iBAAOsB,KAAP;AACD,SAFD;;AA5CsC;AAgDtC,YAAI,2BAAC,UAAUxB,aAAX,KAA8B,IAA9B,gCAAsCA,cAAcG,IAAd,KAAuB,IAA7D,CAAJ,EAAuE;AAAA;AAAA;;AACrEI,kBAAQqB,KAAR,CAAc5B,cAAcG,IAA5B;AACD,SAFD;AAAA;AAAA;AAhDsC;AAmDtCI,gBAAQsB,GAAR;AACD,OApDM,CAAP;AAqDD;;;;;kBAxDkB/B,W","file":"https.js","sourcesContent":["import https from 'https';\n\nexport default class customHttps {\n  static request (options) {\n    const requestParams = Object.assign({}, options);\n    return new Promise((resolve, reject) => {\n      if (('body' in requestParams) === true && requestParams.body !== null) {\n        requestParams.body = JSON.stringify(requestParams.body);\n        requestParams.headers = Object.assign({\n          'Content-Type': 'application/json',\n          'Content-Length': Buffer.byteLength(requestParams.body)\n        }, requestParams.headers);\n      }\n\n      const request = https.request(requestParams, (response) => {\n        let currentBody = [];\n\n        response.setEncoding('utf8');\n        response.on('data', (chunk) => {\n          currentBody.push(chunk);\n        });\n        response.on('end', () => {\n          try {\n            currentBody = JSON.parse(currentBody.join(''));\n          } catch (e) {\n            currentBody = '';\n          }\n\n          if ([200, 201, 204].includes(response.statusCode) === false) {\n            if (currentBody && ('error' in currentBody) === true) {\n              if (Object.prototype.toString.call(currentBody.error) === '[object Object]') {\n                const fieldsError = new Error('invalid body');\n                fieldsError.fields = currentBody.error;\n                reject(fieldsError);\n                return;\n              }\n\n              reject(new Error(currentBody.error));\n              return;\n            }\n\n            reject(new Error(response.statusCode));\n            return;\n          }\n\n          resolve(currentBody);\n        });\n      });\n\n      request.on('error', (error) => {\n        reject(error);\n      });\n\n      if (('body' in requestParams) === true && requestParams.body !== null) {\n        request.write(requestParams.body);\n      }\n      request.end();\n    });\n  }\n}\n"]}